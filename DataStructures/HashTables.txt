Page 6 - Hash Tables

Hash Tables
Ex. Say we wanted to count the number of times the word "lies" appears in Romeo & Juliet.
    Lets say the word appears 20 times. How would we translate this word into and array index?

One way we could do this is grab the number value for each character and add those up.
  [l - 108, i - 105, e - 101, s - 115 = 429]
But what if we only have 30 slots in our array?
  We could mod our sum by 30 and get a new array index.

Now our key (indices in the array) and value (amount of times the word appears) pair would
look like this (9,20).

*** The process we used to translate a key into an array index is called a hashing function. ***

Ex. Now, what if we wanted to count the number of times the word "foes" appear? foes also sums to
429, so our hashing function would give us an indice of 9! This is called a hash collision!

Here's one of the ways that we would deal with them:

- Instead of storing the actual values in our array, let's have each array slot hold a pointer
to a linked list holding the counts for all the words that hash to that index. The linked list
node would have the word, the count and the pointer.

"But wait!" you may be thinking, "Now lookups in our hash table take O(n) time in the worst case,
since we have to walk down a linked list." That's true! You could even say that in the worst case
every key creates a hash collision, so our whole hash table degrades to a linked list.

In industry though, we usually wave our hands and say collisions are rare enough that on
average lookups in a hash table are O(1) time.

That's sort of the tradeoff with hash tables. You get fast lookups by key...
except some lookups could be slow.
