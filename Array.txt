Page 4

Arrays
If we wanted to access information that's stored in array within RAM, we'd have to know two things:
-> The array's starting address (where the array begins in RAM)
-> And the index that we're looking for.

Ex. Let's store each day's kombucha consumption in an 8-bit, fixed-width, unsigned integer.
    And let's store the kombucha counts right next to each other in RAM,
    starting at memory address 3. So index 0 in our array would be at memory address 3,
    and index 1 would be at memory address 4, etc. Suppose we wanted to get the kombucha
    count at index 4 in our array.

    How do we figure out what address in memory to go to? Simple math.
    Take the array's starting address (3), add the index we're looking for (4),
    and that's the address of the item we're looking for = (7).

BUT! This is usually not the case. Most numbers are stored within 64 bit integers.
So how do we build an array of 64-bit (8 byte) integers on top of our 8-bit (1 byte) memory slots?
We simply give each array index 8 address slots instead of 1.

So we can still use simple math to grab the start of the nth item in our array
â€”just gotta throw in some multiplication:

*** Address of nth item in array = address of array start + ( n * size of each item in bytes )

Because the memory controller has a direct connect to RAM, looking up the items in an Array
takes O(1) time. This fast lookup capability is the most important property of an array.

HOWEVER! The formula we used to get the address of the nth item in our array only works if:

-> Each item in the array is the same size (takes up the same number of bytes).
-> The array is uninterrupted (contiguous) in memory.
   Ex. There can't be any gaps in the array...like to "skip over" a memory slot Spotify
        was already using.

This also puts a constraint on what type of things we can put into our array. Every item
has to be the same size! Which is hard if other programs are already using an address in RAM.

That's the tradeoff. Arrays have fast lookups O(1) time, but each item in the array needs to be
the same size, and you need a big block of uninterrupted free memory to store the array.
